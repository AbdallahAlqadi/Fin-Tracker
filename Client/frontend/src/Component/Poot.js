import React, { useState, useRef, useEffect, useMemo } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import * as XLSX from 'xlsx';
import axios from 'axios';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism';
import {
  FaGlobe,
  FaTimes,
  FaChevronDown,
  FaChevronUp,
  FaFilter,
  FaCalendarAlt,
  FaFileAlt,
  FaListUl,
  FaRegFileAlt,
  FaHistory,
  FaDownload,
  FaPrint,
  FaShare,
  FaSearch,
  FaInfoCircle,
  FaTag,
  FaThumbsUp,
  FaThumbsDown,
  FaBookmark,
  FaEye
} from 'react-icons/fa';
import '../cssStyle/poot.css';

function ModernReportDashboard() {
  // State for budget data
  const [budgetItems, setBudgetItems] = useState([]);
  const [loadingBudget, setLoadingBudget] = useState(true);
  const [dateType, setDateType] = useState('month');
  const [filterDate, setFilterDate] = useState(new Date());
  const [filterType, setFilterType] = useState('All');
  
  // State for Report Display
  const [reportContent, setReportContent] = useState('');
  const [reportTitle, setReportTitle] = useState('');
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);
  const [reportHistory, setReportHistory] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [bookmarkedReports, setBookmarkedReports] = useState([]);
  const [reportFeedback, setReportFeedback] = useState({});
  const [activeReportId, setActiveReportId] = useState(null);
  
  // State for collapsible sections
  const [collapsedSections, setCollapsedSections] = useState({});
  
  // State for language
  const [responseLanguage, setResponseLanguage] = useState('en');
  
  // References
  const reportContentRef = useRef(null);
  
  // API configuration
  const token = sessionStorage.getItem('jwt');
  const BUDGET_API = 'http://127.0.0.1:5004/api/getUserBudget';
  const GEMINI_API_KEY = 'AIzaSyB-Ib9v9X1Jzv4hEloKk1oIOQO8ClVaM_w';
  const GEMINI_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;

  // Fetch budget data on component mount
  useEffect(() => {
    fetchBudget();
  }, []);

  // Scroll to top when report content changes
  useEffect(() => {
    if (reportContentRef.current && reportContent) {
      reportContentRef.current.scrollTop = 0;
    }
  }, [reportContent]);

  // Fetch budget data from API
  async function fetchBudget() {
    setLoadingBudget(true);
    try {
      const res = await axios.get(BUDGET_API, {
        headers: { Auth: `Bearer ${token}`, 'Content-Type': 'application/json' }
      });
      setBudgetItems(res.data.products || []);
    } catch (err) {
      console.error('Error fetching budget:', err);
      if (err.response) {
        if (err.response.status === 401) {
          alert('ุบูุฑ ูุตุฑุญ. ูุฑุฌู ุชุณุฌูู ุงูุฏุฎูู ูุฑุฉ ุฃุฎุฑู.');
        } else {
          alert('ุฎุทุฃ ูู ุฌูุจ ุจูุงูุงุช ุงูููุฒุงููุฉ. ุญุงูู ูุงุญููุง.');
        }
      } else {
        alert('ุฎุทุฃ ูู ุงูุดุจูุฉ. ุชุญูู ูู ุงุชุตุงูู.');
      }
    } finally {
      setLoadingBudget(false);
    }
  }

  // Group budget items by category
  const groupedBudgetItems = useMemo(() => groupByCategory(budgetItems), [budgetItems]);
  
  // Filter budget items based on selected filters
  const filteredItems = useMemo(() => filterItems(budgetItems), [budgetItems, filterDate, dateType, filterType]);

  // Group items by category
  function groupByCategory(items) {
    return items.reduce((acc, item) => {
      const cat = item.CategoriesId?.categoryName || 'Unknown';
      if (!acc[cat]) acc[cat] = { ...item, valueitem: 0 };
      acc[cat].valueitem += parseFloat(item.valueitem);
      return acc;
    }, {});
  }

  // Filter items based on selected filters
  function filterItems(items) {
    let filtered = items;
    if (filterDate) {
      const sel = new Date(filterDate);
      filtered = filtered.filter(item => {
        const d = new Date(item.date);
        if (dateType === 'month') {
          return d.getMonth() === sel.getMonth() && d.getFullYear() === sel.getFullYear();
        }
        if (dateType === 'year') {
          return d.getFullYear() === sel.getFullYear();
        }
        return (
          d.getFullYear() === sel.getFullYear() &&
          d.getMonth() === sel.getMonth() &&
          d.getDate() === sel.getDate()
        );
      });
    }
    if (filterType && filterType !== "All") {
      filtered = filtered.filter(item => item.CategoriesId?.categoryType === filterType);
    }
    const grouped = groupByCategory(filtered);
    return Object.values(grouped).filter(i => i.CategoriesId?.categoryName && i.CategoriesId.categoryName !== 'Unknown');
  }

  // Generate report content
  async function getReportContent(items) {
    if (items.length === 0) {
      return responseLanguage === 'ar' ? 'ูุง ุชูุฌุฏ ุจูุงูุงุช ูุงููุฉ ูุฅูุดุงุก ุชูุฑูุฑ ููุตู.' : 'Insufficient data to generate a detailed report.';
    }
    const languageSpecificInstructions = responseLanguage === 'ar' ? 
      `**ููู ุฌุฏุงู: ูุฑุฌู ุงูุงูุชุฒุงู ุงูุตุงุฑู ุจุงูุชูุณูู ูุงููููู ุงููุทููุจูู ุฃุฏูุงู ูุถูุงู ุงููุถูุญ ูุงููุงุฆุฏุฉ.**

ุงูุฑุฌุงุก ุฅูุดุงุก ุชูุฑูุฑ ูุงูู ุงุญุชุฑุงูู ูููุตู ุจุงููุบุฉ ุงูุนุฑุจูุฉุ ูุน ุงูุชุฑููุฒ ุนูู ุชูุฏูู ุฑุคู ูุงุจูุฉ ููุชูููุฐ ูุญููู ุนูููุฉ ุจูุงุกู ุนูู ุจูุงูุงุช ุงูููุฒุงููุฉ ุงููุฑููุฉ. ุงุณุชุฎุฏู ุชูุณูู Markdown ุจุดูู ูุนุงู ูุฌุนูู ุฌุฐุงุจูุง ูุณูู ุงููุฑุงุกุฉ. ูุฌุจ ุฃู ูุชุถูู ุงูุชูุฑูุฑ ุงูุฃูุณุงู ุงูุชุงููุฉ ุจุงูุชุฑุชูุจ:

1.  **๐ ุนููุงู ุฑุฆูุณู ูุงุถุญ ููุชูุฑูุฑ:** ูุนูุณ ุจุฏูุฉ ูุญุชูู ุงูุชูุฑูุฑ ูุงููุชุฑุฉ ุงูุฒูููุฉ (ูุซุงู: "ุงูุชุญููู ุงููุงูู ุงูููุตู ูู [ููุน ุงูููุชุฑ] ูุดูุฑ [ุงูุดูุฑ] [ุงูุณูุฉ] ๐" ุฃู "ููุฎุต ุงูุฃุฏุงุก ุงููุงูู ุงูุณููู ูู [ุงูุณูุฉ] ๐๏ธ").

2.  **โจ ููุฎุต ุชูููุฐู (ููุฏูุฉ):** ููุฑุฉ ููุฌุฒุฉ (3-4 ุฌูู) ุชุณูุท ุงูุถูุก ุนูู ุฃูู ุงููุชุงุฆุฌ ูุงูุงุณุชูุชุงุฌุงุช ุงูุฑุฆูุณูุฉ ูู ุงูุชูุฑูุฑ ูุงููุชุฑุฉ ุงูุชู ูุบุทููุง.

3.  **๐ ุชุญููู ููุตู ูุนุฑุถ ุฌุฏููู:**
    *   **ุฃููุงู: ุนุฑุถ ุงูุจูุงูุงุช ูู ุฌุฏุงูู:**
        *   ุฅุฐุง ูุงูุช ููุงู ุจูุงูุงุช **ุฅูุฑุงุฏุงุช (Income)**ุ ูู ุจุฅูุดุงุก **ุฌุฏูู Markdown** ููุง ุจุนููุงู "๐ฐ ุฌุฏูู ุงูุฅูุฑุงุฏุงุช". ูุฌุจ ุฃู ูุญุชูู ุงูุฌุฏูู ุนูู ุนููุฏูู: **ุงููุฆุฉ** ู **ุงููุจูุบ**. ุฃุถู ุตููุง ููุฅุฌูุงูู ูู ููุงูุฉ ุงูุฌุฏูู.
        *   ุฅุฐุง ูุงูุช ููุงู ุจูุงูุงุช **ูุตุฑููุงุช (Expense)**ุ ูู ุจุฅูุดุงุก **ุฌุฏูู Markdown** ูููุตู ููุง ุจุนููุงู "๐ธ ุฌุฏูู ุงููุตุฑููุงุช". ูุฌุจ ุฃู ูุญุชูู ุงูุฌุฏูู ุนูู ุนููุฏูู: **ุงููุฆุฉ** ู **ุงููุจูุบ**. ุฃุถู ุตููุง ููุฅุฌูุงูู ูู ููุงูุฉ ุงูุฌุฏูู.
        *   ูุซุงู ููุฌุฏูู:
            | ุงููุฆุฉ          | ุงููุจูุบ |
            | -------------- | ------: |
            | ูุฆุฉ ุงูุฏุฎู 1   | 1500   |
            | ูุฆุฉ ุงูุฏุฎู 2   | 2000   |
            | **ุงูุฅุฌูุงูู** | **3500** |
    *   **ุซุงููุงู: ุชุญููู ูุตู ููุฌุฒ:**
        *   ุจุนุฏ ุงูุฌุฏุงููุ ูุฏู ุชุญูููุงู ูุตููุง ููุฌุฒูุง ููุฃุฏุงุก ุงูุนุงู (ููุฑุฉ ุฃู ุงุซูุชูู). ุณูุท ุงูุถูุก ุนูู ุฃูู ุงููุฆุงุช (ุงูุฃูุจุฑ ูุจูุบูุงุ ุฃู ุฐุงุช ุงูุชุบูุฑ ุงูููุญูุธ ุฅู ุฃููู ุงูููุงุฑูุฉ).
        *   **ููุชูุงุฑูุฑ ุงูุดูุฑูุฉ:** ุฑูุฒ ุนูู ููุงุฑูุฉ ุฃุฏุงุก ุงูุดูุฑ ุงูุญุงูู ุจุงูุดูุฑ ุงูุณุงุจู (ุฅุฐุง ูุงูุช ุงูุจูุงูุงุช ุชุณูุญ ุจุฐูู ุถููููุง) ุฃู ุฃุจุฑุฒ ุงูููุงุท ุงูุฑุฆูุณูุฉ ููุดูุฑ.
        *   **ููุชูุงุฑูุฑ ุงูุณูููุฉ:** ูุฏู ูุธุฑุฉ ุนุงูุฉ ุนูู ุฃุฏุงุก ุงููุฆุงุช ุนูู ูุฏุงุฑ ุงูุนุงู.

4.  **๐ฏ ุฃูู ุงูุฑุคู ูุงูุงุณุชูุชุงุฌุงุช:**
    *   ูุณู ูุฎุตุต ุจุนููุงู "๐ฏ ุฃูู ุงูุฑุคู ูุงูุงุณุชูุชุงุฌุงุช".
    *   ุงุณุชุฎุฏู ูุงุฆูุฉ ููุทูุฉ (bullet points) ูุชูุฏูู 3-5 ุฑุคู ูุงุถุญุฉ ููุญุฏุฏุฉ ูุณุชูุฏุฉ *ูุจุงุดุฑุฉ* ูู ุชุญููู ุงูุจูุงูุงุช ูุงูุฌุฏุงูู ุงูููุฏูุฉ. ุชุฌูุจ ุงูุชุนูููุงุช.
    *   ูุซุงู: "โข๏ธโฃ ุดููุช [ุงุณู ุงููุฆุฉ] ุงููุณุจุฉ ุงูุฃูุจุฑ ูู ุงููุตุฑููุงุช ูุฐุง ุงูุดูุฑ ุจูููุฉ [ุงููุจูุบ]."

5.  **๐ก ุชูุตูุงุช ูุญููู ุนูููุฉ:**
    *   ูุณู ูุฎุตุต ุจุนููุงู "๐ก ุชูุตูุงุช ูุญููู ุนูููุฉ".
    *   ูุฏู 2-4 ุชูุตูุงุช **ูุญุฏุฏุฉ ุฌุฏุงูุ ูุงุจูุฉ ููุชุทุจูู ููุฑุงูุ ููุฑุชุจุทุฉ ุจุดูู ูุจุงุดุฑ** ุจุงูุฑุคู ุงููุฐููุฑุฉ ูู ุงููุณู ุงูุณุงุจู ุฃู ุจููุงุญุธุงุช ูุญุฏุฏุฉ ูู ุงูุฌุฏุงูู. **ูุฌุจ ุฃู ุชููู ูู ุชูุตูุฉ ูุชูุฌุฉ ูุจุงุดุฑุฉ ูุชุญููู ุงูุจูุงูุงุช ุงูููุฏูุฉ.**
    *   **ุชุฌูุจ ุชูุงูุงู ุงููุตุงุฆุญ ุงูุนุงูุฉ ุฃู ุงูุจุฏูููุฉ.** ุฑูุฒ ุนูู ุฎุทูุงุช ุนูููุฉ ูููู ูููุณุชุฎุฏู ุงุชุฎุงุฐูุง.
    *   ุงุฐูุฑ ุจูุถูุญ **ููุงุฐุง** ูุฐู ุงูุชูุตูุฉ ูููุฉ (ุงุฑุจุทูุง ุจุงูุฑุคูุฉ/ุงูุจูุงูุงุช) ู **ูุง ูู ุงูุฅุฌุฑุงุก ุงูููุชุฑุญ** ุจุดูู ููููุณ.
    *   ูุซุงู: "1. **ุงูุฑุคูุฉ ุงููุฑุชุจุทุฉ:** ุดููุช ูุตุฑููุงุช [ุงุณู ุงููุฆุฉ] ูุณุจุฉ X% ูู ุงูุฅุฌูุงูู. **ุงูุชูุตูุฉ:** ูู ุจูุฑุงุฌุนุฉ ุชูุตูููุฉ ูููุงุชูุฑ [ุงุณู ุงููุฆุฉ] ููุดูุฑ ุงููุงุถู ูุชุญุฏูุฏ ุงูุจููุฏ ุบูุฑ ุงูุถุฑูุฑูุฉ ุงูุชู ูููู ุฅูุบุงุคูุง ุฃู ุชูููููุงุ ุจูุฏู ุฎูุถ ูุฐุง ุงูุจูุฏ ุจูุณุจุฉ Y% ุงูุดูุฑ ุงููุงุฏู."
    *   ูุซุงู ุขุฎุฑ: "2. **ุงูุฑุคูุฉ ุงููุฑุชุจุทุฉ:** ุงูุฎูุงุถ ุฅูุฑุงุฏุงุช [ุงุณู ุงููุฆุฉ] ููุงุฑูุฉ ุจู [ูุชุฑุฉ ุณุงุจูุฉ/ูุชูุณุท]. **ุงูุชูุตูุฉ:** ุชุญููู ุฃุณุจุงุจ ุงูุฎูุงุถ ุฅูุฑุงุฏุงุช [ุงุณู ุงููุฆุฉ] ุนุจุฑ [ุฅุฌุฑุงุก ูุญุฏุฏุ ูุซูุงู: ุงูุชูุงุตู ูุน ุงูุนููุงุก ุงูุฑุฆูุณููู/ูุฑุงุฌุนุฉ ุงุณุชุฑุงุชูุฌูุฉ ุงูุชุณุนูุฑ] ูุงูุชุฑุงุญ ุฎุทุฉ ููุนุงูุฌุฉ ุฐูู ุฎูุงู ุงูุฃุณุจูุนูู ุงููุงุฏููู."

6.  **๐ ุฎุงุชูุฉ:**
    *   ููุฑุฉ ูุตูุฑุฉ ุชูุฎุต ุงูููุงุท ุงูุฑุฆูุณูุฉ ูุชุคูุฏ ุนูู ุฃูููุฉ ูุชุงุจุนุฉ ุงูุชูุตูุงุช.

**ุชูุณูู ุฅุถุงูู:**
*   ุงุณุชุฎุฏู **ุงููุต ุงูุบุงูู** ููุนูุงููู ุงูุฑุฆูุณูุฉ ูุงููุฑุนูุฉ ูุงููุตุทูุญุงุช ุงููุงูุฉ.
*   ุงุณุชุฎุฏู ุงูุฑููุฒ ุงูุชุนุจูุฑูุฉ (emojis) ุจุดูู ููุงุณุจ ูุฒูุงุฏุฉ ุงูุฌุงุฐุจูุฉ ุงูุจุตุฑูุฉ ูููู ุจุงุนุชุฏุงู.
*   ุชุฃูุฏ ูู ูุฌูุฏ ููุงุตู ูุงุถุญุฉ ุจูู ุงูุฃูุณุงู ุจุงุณุชุฎุฏุงู ุณุทูุฑ ูุงุฑุบุฉ.
*   **ููู ููุชูุงุฑูุฑ ุงูุดูุฑูุฉ:** ุชุฃูุฏ ูู ุฃู ุงูุชูุฑูุฑ ูุนูุณ ููุฎุตูุง ูุงุถุญูุง ููุดูุฑ ุงููุญุฏุฏุ ูุฃู ุงูุฌุฏุงูู ูุงูุชูุตูุงุช ุชุฑูุฒ ุนูู ุจูุงูุงุช ุงูุดูุฑ.
` :
      `**Very Important: Please strictly adhere to the requested format and structure below to ensure clarity and usefulness.**

Please generate a professional and detailed financial report in English, focusing on actionable insights and practical solutions based on the provided budget data. Use Markdown formatting effectively for visual appeal and readability. The report must include the following sections in order:

1.  **๐ Clear Main Report Title:** Accurately reflecting the report's content and time period (e.g., "Detailed Financial Analysis for [Filter Type] for [Month] [Year] ๐" or "Annual Financial Performance Summary for [Year] ๐๏ธ").

2.  **โจ Executive Summary (Introduction):** A concise paragraph (3-4 sentences) highlighting the most critical findings and key takeaways from the report and the period covered.

3.  **๐ Detailed Analysis and Tabular Display:**
    *   **First: Display Data in Tables:**
        *   If **Income** data exists, create a **Markdown table** for it titled "๐ฐ Income Table". The table should have two columns: **Category** and **Amount**. Add a total row at the bottom.
        *   If **Expense** data exists, create a separate **Markdown table** for it titled "๐ธ Expense Table". The table should have two columns: **Category** and **Amount**. Add a total row at the bottom.
        *   Example Table:
            | Category      | Amount |
            | ------------- | -----: |
            | Income Cat 1  | 1500   |
            | Income Cat 2  | 2000   |
            | **Total**     | **3500** |
    *   **Second: Brief Textual Analysis:**
        *   Following the tables, provide a brief textual analysis of the overall performance (1-2 paragraphs). Highlight the most significant categories (largest amounts, or notable changes if comparison is possible).
        *   **For Monthly Reports:** Focus on comparing the current month's performance to the previous month (if implicitly possible from data) or highlight key points for the month.
        *   **For Yearly Reports:** Provide an overview of category performance throughout the year.

4.  **๐ฏ Key Insights and Conclusions:**
    *   A dedicated section titled "๐ฏ Key Insights and Conclusions".
    *   Use bullet points to present 3-5 clear, specific insights derived *directly* from the analysis of the provided data and tables. Avoid generalizations.
    *   Example: "โข๏ธโฃ [Category Name] constituted the largest portion of expenses this month at [Amount]."

5.  **๐ก Practical Recommendations and Solutions:**
    *   A dedicated section titled "๐ก Practical Recommendations and Solutions".
    *   Provide 2-4 recommendations that are **extremely specific, immediately actionable, and directly linked** to the insights mentioned in the previous section or specific observations from the tables. **Each recommendation must be a direct consequence of analyzing the provided data.**
    *   **Strictly avoid generic or obvious advice.** Focus on practical steps the user can take.
    *   Clearly state **why** the recommendation is important (link to insight/data) and **what the proposed action** is concretely.
    *   Example: "1. **Linked Insight:** Expenses in [Category Name] constituted X% of the total. **Recommendation:** Conduct a detailed review of last month's invoices for [Category Name] to identify non-essential items that can be eliminated or reduced, aiming for a Y% reduction in this category next month."
    *   Another Example: "2. **Linked Insight:** Revenue from [Category Name] decreased compared to [previous period/average]. **Recommendation:** Analyze the reasons for the revenue drop in [Category Name] by [specific action, e.g., contacting key clients/reviewing pricing strategy] and propose a plan to address it within the next two weeks."

6.  **๐ Conclusion:**
    *   A brief paragraph summarizing the main points and emphasizing the importance of following up on recommendations.

**Additional Formatting:**
*   Use **bold text** for main and subheadings and important terms.
*   Use emojis appropriately to enhance visual appeal, but sparingly.
*   Ensure clear separation between sections using blank lines.
*   **Important for Monthly Reports:** Ensure the report reflects a clear summary for the specific month, with tables and recommendations focused on that month's data.
`;

    const prompt = `${languageSpecificInstructions}
ุงูุจูุงูุงุช:
Data:
${JSON.stringify(items, null, 2)}
    `.trim();

    const res = await fetch(GEMINI_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{ parts: [{ text: prompt }] }],
        generationConfig: { temperature: 0.65, maxOutputTokens: 3500, topP: 0.9, topK: 40 }
      })
    });
    if (!res.ok) {
        const errorBody = await res.text();
        console.error('Error from API:', res.status, errorBody);
        throw new Error('Failed to get report from API');
    }
    const data = await res.json();
    if (data.candidates && data.candidates.length > 0 && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts.length > 0) {
        return data.candidates[0].content.parts[0].text;
    } else {
        console.error('Unexpected API response structure:', data);
        return responseLanguage === 'ar' ? 'ุชู ุงุณุชูุงู ุฑุฏ ุบูุฑ ูุชููุน ูู ุฎุฏูุฉ ุฅูุดุงุก ุงูุชูุงุฑูุฑ.' : 'Received an unexpected response from the report generation service.';
    }
  }

  // Handle report generation
  async function handleGenerateReport() {
    const items = filteredItems;
    if (items.length === 0) {
      alert(responseLanguage === 'ar' ? 'ูุง ุชูุฌุฏ ุจูุงูุงุช ูุงููุฉ ูุฅูุดุงุก ุชูุฑูุฑ.' : 'Not enough data to generate a report.');
      return;
    }
    
    setIsGeneratingReport(true);
    
    try {
      const reportText = await getReportContent(items);
      const locale = responseLanguage === 'ar' ? 'ar-EG' : 'en-US';
      let dateStr;
      
      if (dateType === 'full') {
        dateStr = filterDate.toLocaleDateString(locale);
      } else if (dateType === 'month') {
        dateStr = filterDate.toLocaleDateString(locale, { month: 'long', year: 'numeric' });
      } else {
        dateStr = filterDate.toLocaleDateString(locale, { year: 'numeric' });
      }
      
      const title = responseLanguage === 'ar'
        ? `ุงูุชูุฑูุฑ ุงููุงูู ูู ${filterType === "All" ? "ุฌููุน ุงูุฃููุงุน" : filterType} ูู ${dateStr}`
        : `Financial Report for ${filterType === "All" ? "All Types" : filterType} in ${dateStr}`;
      
      setReportTitle(title);
      setReportContent(reportText);
      
      // Reset collapsed sections state when opening a new report
      setCollapsedSections({});
      
      // Add to report history
      const newReport = {
        id: Date.now(),
        title,
        content: reportText,
        date: new Date().toLocaleString(locale),
        filters: {
          dateType,
          date: dateStr,
          type: filterType
        }
      };
      
      setReportHistory(prev => [newReport, ...prev.slice(0, 9)]);
      
    } catch (err) {
      console.error(err);
      alert(responseLanguage === 'ar' ? 'ุนุฐุฑุงูุ ูู ูุชููู ูู ุฅูุดุงุก ุงูุชูุฑูุฑ.' : 'Sorry, we couldn\'t generate the report.');
    } finally {
      setIsGeneratingReport(false);
    }
  }

  // Toggle section collapse
  function toggleSection(sectionId) {
    setCollapsedSections(prev => ({
      ...prev,
      [sectionId]: !prev[sectionId]
    }));
  }

  // Handle print report
  function handlePrintReport() {
    const printWindow = window.open('', '_blank');
    
    if (!printWindow) {
      alert(responseLanguage === 'ar' ? 'ูุฑุฌู ุงูุณูุงุญ ุจุงูููุงูุฐ ุงูููุจุซูุฉ ูุทุจุงุนุฉ ุงูุชูุฑูุฑ.' : 'Please allow pop-ups to print the report.');
      return;
    }
    
    const htmlContent = `
      <!DOCTYPE html>
      <html dir="${responseLanguage === 'ar' ? 'rtl' : 'ltr'}" lang="${responseLanguage}">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${reportTitle}</title>
        <style>
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
          }
          h1, h2, h3, h4 {
            color: #4169E1;
            margin-top: 1.5em;
            margin-bottom: 0.5em;
          }
          h1 {
            text-align: center;
            font-size: 1.8em;
            border-bottom: 2px solid #4169E1;
            padding-bottom: 0.3em;
          }
          ul, ol {
            padding-left: 2em;
          }
          li {
            margin-bottom: 0.5em;
          }
          blockquote {
            border-left: 4px solid #4169E1;
            padding-left: 1em;
            margin-left: 0;
            color: #555;
          }
          @media print {
            body {
              font-size: 12pt;
            }
            h1 {
              font-size: 18pt;
            }
            h2 {
              font-size: 16pt;
            }
            h3 {
              font-size: 14pt;
            }
          }
        </style>
      </head>
      <body>
        <h1>${reportTitle}</h1>
        <div class="report-content">
          ${reportContent.replace(/\n/g, '<br>')}
        </div>
      </body>
      </html>
    `;
    
    printWindow.document.open();
    printWindow.document.write(htmlContent);
    printWindow.document.close();
    
    // Wait for content to load before printing
    setTimeout(() => {
      printWindow.print();
      // Close the window after print dialog is closed (optional)
      // printWindow.close();
    }, 500);
  }

  // Handle download report as PDF
  function handleDownloadReport() {
    // This is a placeholder - in a real implementation, you would use a library like jsPDF
    // or make a server request to generate a PDF
    alert(responseLanguage === 'ar' ? 'ุณูุชู ุชูููุฐ ูุธููุฉ ุชูุฒูู PDF ูู ุงูุฅุตุฏุงุฑ ุงูููุงุฆู.' : 'PDF download functionality will be implemented in the final version.');
  }

  // Handle export report as Excel
  function handleExportToExcel() {
    // This is a placeholder - in a real implementation, you would format the data and use XLSX library
    alert(responseLanguage === 'ar' ? 'ุณูุชู ุชูููุฐ ูุธููุฉ ุชุตุฏูุฑ Excel ูู ุงูุฅุตุฏุงุฑ ุงูููุงุฆู.' : 'Excel export functionality will be implemented in the final version.');
  }

  // Handle share report
  function handleShareReport() {
    // This is a placeholder - in a real implementation, you would implement sharing functionality
    alert(responseLanguage === 'ar' ? 'ุณูุชู ุชูููุฐ ูุธููุฉ ุงููุดุงุฑูุฉ ูู ุงูุฅุตุฏุงุฑ ุงูููุงุฆู.' : 'Sharing functionality will be implemented in the final version.');
  }

  // Format date for display
  function formatDate(date, type) {
    const locale = responseLanguage === 'ar' ? 'ar-EG' : 'en-US';
    const dateObj = new Date(date);
    
    if (type === 'full') {
      return dateObj.toLocaleDateString(locale);
    } else if (type === 'month') {
      return dateObj.toLocaleDateString(locale, { month: 'long', year: 'numeric' });
    } else {
      return dateObj.toLocaleDateString(locale, { year: 'numeric' });
    }
  }

  // Load a report from history
  function loadReportFromHistory(report) {
    setReportTitle(report.title);
    setReportContent(report.content);
    setCollapsedSections({});
    setActiveReportId(report.id);
  }
  
  // Toggle bookmark for a report
  function toggleBookmark(reportId) {
    if (bookmarkedReports.includes(reportId)) {
      setBookmarkedReports(prev => prev.filter(id => id !== reportId));
    } else {
      setBookmarkedReports(prev => [...prev, reportId]);
    }
  }
  
  // Submit feedback for a report
  function submitFeedback(reportId, isPositive) {
    setReportFeedback(prev => ({
      ...prev,
      [reportId]: isPositive
    }));
    
    // Show feedback confirmation with animation
    const feedbackElement = document.getElementById(`feedback-${isPositive ? 'positive' : 'negative'}`);
    if (feedbackElement) {
      feedbackElement.classList.add('feedback-active');
      setTimeout(() => {
        feedbackElement.classList.remove('feedback-active');
      }, 2000);
    }
  }
  
  // Search in reports
  function searchReports(term) {
    setSearchTerm(term);
  }
  
  // Get filtered history based on search term
  const filteredHistory = useMemo(() => {
    if (!searchTerm.trim()) return reportHistory;
    
    return reportHistory.filter(report => 
      report.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      report.content.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [reportHistory, searchTerm]);

  return (
    <div className="modern-report-dashboard" dir={responseLanguage === 'ar' ? 'rtl' : 'ltr'}>
      {/* Header */}
      <header className="dashboard-header">
        <div className="header-content">
          <h1><FaFileAlt /> {responseLanguage === 'ar' ? 'ููุญุฉ ุงูุชูุงุฑูุฑ ุงููุงููุฉ' : 'Financial Reports Dashboard'}</h1>
          <div className="header-actions">
            <button className="language-toggle" onClick={() => setResponseLanguage(prev => prev === 'ar' ? 'en' : 'ar')}>
              <FaGlobe /> {responseLanguage === 'ar' ? 'English' : 'ุงูุนุฑุจูุฉ'}
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="dashboard-content">
        {/* Sidebar */}
        <aside className="dashboard-sidebar">
          <div className="sidebar-section">
            <h3><FaHistory /> {responseLanguage === 'ar' ? 'ุงูุชูุงุฑูุฑ ุงูุณุงุจูุฉ' : 'Report History'}</h3>
            <div className="search-container">
              <div className="search-input-wrapper">
                <FaSearch className="search-icon" />
                <input 
                  type="text" 
                  className="search-input" 
                  placeholder={responseLanguage === 'ar' ? 'ุจุญุซ ูู ุงูุชูุงุฑูุฑ...' : 'Search reports...'}
                  value={searchTerm}
                  onChange={(e) => searchReports(e.target.value)}
                />
                {searchTerm && (
                  <button 
                    className="clear-search" 
                    onClick={() => setSearchTerm('')}
                  >
                    <FaTimes />
                  </button>
                )}
              </div>
            </div>
            <div className="report-history-list">
              {filteredHistory.length > 0 ? (
                filteredHistory.map(report => (
                  <div 
                    key={report.id} 
                    className={`history-item ${activeReportId === report.id ? 'active' : ''}`}
                    onClick={() => loadReportFromHistory(report)}
                  >
                    <FaRegFileAlt className="history-icon" />
                    <div className="history-item-details">
                      <h4>{report.title}</h4>
                      <span>{report.date}</span>
                    </div>
                    <div className="history-item-actions">
                      <button 
                        className={`bookmark-button ${bookmarkedReports.includes(report.id) ? 'bookmarked' : ''}`}
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleBookmark(report.id);
                        }}
                        title={bookmarkedReports.includes(report.id) ? 'Remove bookmark' : 'Bookmark report'}
                      >
                        <FaBookmark />
                      </button>
                      <button 
                        className="view-button"
                        onClick={(e) => {
                          e.stopPropagation();
                          loadReportFromHistory(report);
                        }}
                        title="View report"
                      >
                        <FaEye />
                      </button>
                    </div>
                  </div>
                ))
              ) : searchTerm ? (
                <p className="no-history">
                  {responseLanguage === 'ar' 
                    ? 'ูุง ุชูุฌุฏ ูุชุงุฆุฌ ูุทุงุจูุฉ ูุจุญุซู.' 
                    : 'No matching results for your search.'}
                </p>
              ) : (
                <p className="no-history">
                  {responseLanguage === 'ar' 
                    ? 'ูุง ุชูุฌุฏ ุชูุงุฑูุฑ ุณุงุจูุฉ. ูู ุจุฅูุดุงุก ุชูุฑูุฑ ุฌุฏูุฏ ููุจุฏุก.' 
                    : 'No previous reports. Create a new report to get started.'}
                </p>
              )}
            </div>
            {bookmarkedReports.length > 0 && (
              <div className="bookmarked-section">
                <h4><FaBookmark /> {responseLanguage === 'ar' ? 'ุงูุชูุงุฑูุฑ ุงููุญููุธุฉ' : 'Bookmarked Reports'}</h4>
                <div className="bookmarked-list">
                  {reportHistory
                    .filter(report => bookmarkedReports.includes(report.id))
                    .map(report => (
                      <div 
                        key={`bookmark-${report.id}`} 
                        className="bookmarked-item"
                        onClick={() => loadReportFromHistory(report)}
                      >
                        <FaRegFileAlt />
                        <span>{report.title}</span>
                      </div>
                    ))
                  }
                </div>
              </div>
            )}
          </div>
        </aside>

        {/* Main Panel */}
        <main className="dashboard-main">
          {/* Filter Panel */}
          <div className="filter-panel">
            <h2><FaFilter /> {responseLanguage === 'ar' ? 'ุชุตููุฉ ุงูุจูุงูุงุช' : 'Filter Data'}</h2>
            <div className="filter-controls">
              <div className="filter-group">
                <label>{responseLanguage === 'ar' ? 'ููุน ุงูุชุงุฑูุฎ:' : 'Date Type:'}</label>
                <select 
                  value={dateType} 
                  onChange={(e) => setDateType(e.target.value)}
                >
                  <option value="full">{responseLanguage === 'ar' ? 'ููู ูุญุฏุฏ' : 'Specific Day'}</option>
                  <option value="month">{responseLanguage === 'ar' ? 'ุดูุฑ' : 'Month'}</option>
                  <option value="year">{responseLanguage === 'ar' ? 'ุณูุฉ' : 'Year'}</option>
                </select>
              </div>

              <div className="filter-group">
                <label><FaCalendarAlt /> {responseLanguage === 'ar' ? 'ุงูุชุงุฑูุฎ:' : 'Date:'}</label>
                {dateType === 'full' && (
                  <input 
                    type="date" 
                    value={filterDate.toISOString().split('T')[0]} 
                    onChange={(e) => setFilterDate(new Date(e.target.value))}
                  />
                )}
                {dateType === 'month' && (
                  <input 
                    type="month" 
                    value={`${filterDate.getFullYear()}-${String(filterDate.getMonth() + 1).padStart(2, '0')}`} 
                    onChange={(e) => setFilterDate(new Date(e.target.value))}
                  />
                )}
                {dateType === 'year' && (
                  <input 
                    type="number" 
                    value={filterDate.getFullYear()} 
                    onChange={(e) => {
                      const newDate = new Date(filterDate);
                      newDate.setFullYear(e.target.value);
                      setFilterDate(newDate);
                    }}
                    min="2000" 
                    max="2100"
                  />
                )}
              </div>

              <div className="filter-group">
                <label><FaListUl /> {responseLanguage === 'ar' ? 'ุงูููุน:' : 'Type:'}</label>
                <select 
                  value={filterType} 
                  onChange={(e) => setFilterType(e.target.value)}
                >
                  <option value="All">{responseLanguage === 'ar' ? 'ุงููู' : 'All'}</option>
                  <option value="Income">{responseLanguage === 'ar' ? 'ุฏุฎู' : 'Income'}</option>
                  <option value="Expense">{responseLanguage === 'ar' ? 'ูุตุฑูู' : 'Expense'}</option>
                </select>
              </div>

              <button 
                className="generate-report-btn" 
                onClick={handleGenerateReport}
                disabled={isGeneratingReport || loadingBudget}
              >
                {isGeneratingReport 
                  ? (responseLanguage === 'ar' ? 'ุฌุงุฑู ุงูุฅูุดุงุก...' : 'Generating...') 
                  : (responseLanguage === 'ar' ? 'ุฅูุดุงุก ุงูุชูุฑูุฑ' : 'Generate Report')}
              </button>
            </div>
          </div>

          {/* Report Display */}
          <div className="report-display">
            {reportContent ? (
              <>
                <div className="report-header">
                  <h2>{reportTitle}</h2>
                  <div className="report-actions">
                    <button onClick={handlePrintReport} title={responseLanguage === 'ar' ? 'ุทุจุงุนุฉ' : 'Print'}>
                      <FaPrint />
                    </button>
                    <button onClick={handleDownloadReport} title={responseLanguage === 'ar' ? 'ุชูุฒูู PDF' : 'Download PDF'}>
                      <FaDownload />
                    </button>
                    <button onClick={handleExportToExcel} title={responseLanguage === 'ar' ? 'ุชุตุฏูุฑ ุฅูู Excel' : 'Export to Excel'}>
                      <FaFileAlt />
                    </button>
                    <button onClick={handleShareReport} title={responseLanguage === 'ar' ? 'ูุดุงุฑูุฉ' : 'Share'}>
                      <FaShare />
                    </button>
                  </div>
                </div>
                {reportContent && (
                  <div className="report-feedback">
                    <div className="feedback-question">
                      {responseLanguage === 'ar' ? 'ูู ูุงู ูุฐุง ุงูุชูุฑูุฑ ูููุฏุงูุ' : 'Was this report helpful?'}
                    </div>
                    <div className="feedback-buttons">
                      <button 
                        className={`feedback-button ${reportFeedback[activeReportId] === true ? 'active' : ''}`}
                        onClick={() => submitFeedback(activeReportId, true)}
                        id="feedback-positive"
                      >
                        <FaThumbsUp /> {responseLanguage === 'ar' ? 'ูุนู' : 'Yes'}
                      </button>
                      <button 
                        className={`feedback-button ${reportFeedback[activeReportId] === false ? 'active' : ''}`}
                        onClick={() => submitFeedback(activeReportId, false)}
                        id="feedback-negative"
                      >
                        <FaThumbsDown /> {responseLanguage === 'ar' ? 'ูุง' : 'No'}
                      </button>
                    </div>
                    <div className="report-tags">
                      <FaTag /> 
                      <span className="tag">{filterType === 'All' ? 'All Types' : filterType}</span>
                      <span className="tag">{dateType === 'month' ? 'Monthly' : dateType === 'year' ? 'Yearly' : 'Daily'}</span>
                      <button 
                        className={`bookmark-button-large ${bookmarkedReports.includes(activeReportId) ? 'bookmarked' : ''}`}
                        onClick={() => toggleBookmark(activeReportId)}
                      >
                        <FaBookmark /> {bookmarkedReports.includes(activeReportId) 
                          ? (responseLanguage === 'ar' ? 'ุฅุฒุงูุฉ ูู ุงููุญููุธุงุช' : 'Remove Bookmark') 
                          : (responseLanguage === 'ar' ? 'ุญูุธ ุงูุชูุฑูุฑ' : 'Bookmark Report')}
                      </button>
                    </div>
                  </div>
                )}
                <div className="report-content" ref={reportContentRef}>
                  <ReactMarkdown
                    remarkPlugins={[remarkGfm]}
                    components={{
                      h1: ({node, ...props}) => <h1 className="report-h1" {...props} />,
                      h2: ({node, ...props}) => <h2 className="report-h2" {...props} />,
                      h3: ({node, children, ...props}) => {
                        // Generate a unique ID for this section based on the heading text
                        const sectionId = children.toString().replace(/[^a-zA-Z0-9]/g, '-').toLowerCase();
                        const isCollapsed = collapsedSections[sectionId];
                        
                        return (
                          <div className="collapsible-section">
                            <h3 
                              className="report-h3 collapsible-header" 
                              onClick={() => toggleSection(sectionId)}
                              {...props}
                            >
                              {children}
                              {isCollapsed ? <FaChevronDown className="collapse-icon" /> : <FaChevronUp className="collapse-icon" />}
                            </h3>
                            <div className={`collapsible-content ${isCollapsed ? 'collapsed' : ''}`}>
                              {/* Content will be rendered here by ReactMarkdown */}
                            </div>
                          </div>
                        );
                      },
                      h4: ({node, ...props}) => <h4 className="report-h4" {...props} />,
                      p: ({node, ...props}) => <p className="report-paragraph" {...props} />,
                      ul: ({node, ...props}) => <ul className="report-list" {...props} />,
                      ol: ({node, ...props}) => <ol className="report-ordered-list" {...props} />,
                      li: ({node, ...props}) => <li className="report-list-item" {...props} />,
                      blockquote: ({node, ...props}) => <blockquote className="report-blockquote" {...props} />,
                      code: ({node, inline, className, children, ...props}) => {
                        const match = /language-(\w+)/.exec(className || '');
                        return !inline && match ? (
                          <div className="report-code-block">
                            <SyntaxHighlighter
                              style={tomorrow}
                              language={match[1]}
                              PreTag="div"
                              {...props}
                            >
                              {String(children).replace(/\n$/, '')}
                            </SyntaxHighlighter>
                          </div>
                        ) : (
                          <code className="report-inline-code" {...props}>
                            {children}
                          </code>
                        );
                      },
                      table: ({node, ...props}) => <table className="report-table" {...props} />,
                      thead: ({node, ...props}) => <thead className="report-thead" {...props} />,
                      tbody: ({node, ...props}) => <tbody className="report-tbody" {...props} />,
                      tr: ({node, ...props}) => <tr className="report-tr" {...props} />,
                      th: ({node, ...props}) => <th className="report-th" {...props} />,
                      td: ({node, ...props}) => <td className="report-td" {...props} />
                    }}
                  >
                    {reportContent}
                  </ReactMarkdown>
                </div>
              </>
            ) : (
              <div className="empty-report-state">
                <FaFileAlt className="empty-icon" />
                <h3>
                  {responseLanguage === 'ar' 
                    ? 'ูู ูุชู ุฅูุดุงุก ุฃู ุชูุฑูุฑ ุจุนุฏ' 
                    : 'No Report Generated Yet'}
                </h3>
                <p>
                  {responseLanguage === 'ar'
                    ? 'ุงุณุชุฎุฏู ููุญุฉ ุงูุชุตููุฉ ุฃุนูุงู ูุชุญุฏูุฏ ุงููุนุงููุฑ ูุฅูุดุงุก ุชูุฑูุฑ ุฌุฏูุฏ.'
                    : 'Use the filter panel above to set criteria and generate a new report.'}
                </p>
                <button 
                  className="generate-report-btn" 
                  onClick={handleGenerateReport}
                  disabled={isGeneratingReport || loadingBudget}
                >
                  {responseLanguage === 'ar' ? 'ุฅูุดุงุก ุชูุฑูุฑ ุฌุฏูุฏ' : 'Generate New Report'}
                </button>
              </div>
            )}
          </div>
        </main>
      </div>
    </div>
  );
}

export default ModernReportDashboard;
